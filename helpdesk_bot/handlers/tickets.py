import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from .. import db
from ..utils import (
    ADMIN_IDS,
    ALL_ADMINS,
    PROBLEMS,
    STATUS_OPTIONS,
    USER_MAIN_MENU,
    ADMIN_MAIN_MENU,
    CANCEL_KEYBOARD,
    format_kyiv_time,
    log,
    STATE_ROW,
    STATE_COMP,
    STATE_PROBLEM_MENU,
    STATE_CUSTOM_DESC,
)


async def start_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat

    await db.add_user(user.id, user.full_name)

    chat_type = getattr(chat, "type", "private") if chat else "private"
    is_private_chat = chat_type == "private"
    is_admin = user.id in ADMIN_IDS

    menu = ADMIN_MAIN_MENU if is_private_chat and is_admin else USER_MAIN_MENU
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(menu, resize_keyboard=True),
    )

    if is_admin and not is_private_chat:
        if not ctx.user_data.get("admin_private_prompt_sent"):
            try:
                await ctx.bot.send_message(
                    chat_id=user.id,
                    text=(
                        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ. "
                        "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–π."
                    ),
                    reply_markup=ReplyKeyboardMarkup(
                        ADMIN_MAIN_MENU, resize_keyboard=True
                    ),
                )
            except Exception as exc:  # pragma: no cover - depends on Telegram API
                log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω—É %s: %s", user.id, exc)
            ctx.user_data["admin_private_prompt_sent"] = True

    return ConversationHandler.END


async def start_conversation(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—è–¥–∞ (1‚Äì6):", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_ROW


async def handle_cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    message = getattr(update, "message", None)
    text = (getattr(message, "text", None) or "").strip()
    if text == "–û—Ç–º–µ–Ω–∞":
        result = await cancel(update, ctx)
        return result if result is not None else ConversationHandler.END
    return None


async def row_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    cancel_result = await handle_cancel(update, ctx)
    if cancel_result:
        return cancel_result
    txt = update.message.text.strip()
    if not txt.isdigit() or not (1 <= int(txt) <= 6):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä—è–¥. –í–≤–µ–¥–∏—Ç–µ 1‚Äì6:", reply_markup=CANCEL_KEYBOARD
        )
        return STATE_ROW
    ctx.user_data["row"] = txt
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_COMP


async def comp_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    cancel_result = await handle_cancel(update, ctx)
    if cancel_result:
        return cancel_result
    txt = update.message.text.strip()
    row = int(ctx.user_data["row"])
    max_comp = 9 if row in (5, 6) else 10
    if not txt.isdigit() or not (1 <= int(txt) <= max_comp):
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–º–ø. –í–≤–µ–¥–∏—Ç–µ 1‚Äì{max_comp}:",
            reply_markup=CANCEL_KEYBOARD,
        )
        return STATE_COMP
    ctx.user_data["row"] = str(row)
    ctx.user_data["comp"] = txt
    ctx.user_data["row_comp"] = f"{row}/{txt}"
    kb = [PROBLEMS[i : i + 2] for i in range(0, len(PROBLEMS), 2)] + [["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=ReplyKeyboardMarkup(
            kb, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return STATE_PROBLEM_MENU


async def problem_menu_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    cancel_result = await handle_cancel(update, ctx)
    if cancel_result:
        return cancel_result
    ch = update.message.text.strip()
    if ch not in PROBLEMS:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=CANCEL_KEYBOARD
        )
        return STATE_PROBLEM_MENU
    ctx.user_data["problem"] = ch
    await update.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∫—Ä–∞—Ç–∫–æ:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_CUSTOM_DESC


async def custom_desc_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    cancel_result = await handle_cancel(update, ctx)
    if cancel_result:
        return cancel_result
    txt = update.message.text.strip()
    ctx.user_data["description"] = txt
    return await send_request(update, ctx)


async def send_request(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    rowc = ctx.user_data["row_comp"]
    prob = ctx.user_data["problem"]
    desc = ctx.user_data["description"]
    user = update.effective_user

    req_id = await db.add_ticket(rowc, prob, desc, user.full_name, user.id)

    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø—Ä–æ—Å #{req_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–†/–ö: {rowc}\n{prob}. {desc}",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
    )

    btns_s = [
        InlineKeyboardButton(s, callback_data=f"status:{req_id}:{s}")
        for s in STATUS_OPTIONS
        if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
    ]
    btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{req_id}")
    created = format_kyiv_time((await db.get_ticket(req_id))[7])
    admin_text = (
        f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #{req_id}\n"
        f"{rowc}: {prob}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        f"–û—Ç: {user.full_name}, {created}"
    )
    markup = InlineKeyboardMarkup([btns_s, [btn_r]])

    for aid in ALL_ADMINS:
        try:
            await ctx.bot.send_message(aid, admin_text, reply_markup=markup)
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É %s: %s", aid, e)

    return ConversationHandler.END


async def my_requests(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    rowc = ctx.user_data.get("row_comp", "")
    all_r = await db.list_tickets()
    mine = [r for r in all_r if r[5] == uid and r[1] == rowc]
    if not mine:
        await update.message.reply_text(
            f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {rowc}.",
            reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
        )
        return
    btns = [
        [InlineKeyboardButton(f"#{r[0]} ({r[1]}) [{r[6]}] {r[2]}", callback_data=f"show:{r[0]}")]
        for r in mine
    ]
    await update.message.reply_text(
        "–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
        reply_markup=InlineKeyboardMarkup(btns),
    )


async def show_request(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    rid = int(q.data.split(":")[1])
    r = await db.get_ticket(rid)
    rowc = ctx.user_data.get("row_comp", "")
    if not r or r[5] != q.from_user.id or r[1] != rowc:
        await q.edit_message_reply_markup(None)
        await q.message.reply_text(
            "–ù–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
        )
        return
    await q.edit_message_reply_markup(None)
    created = format_kyiv_time(r[7])
    detail = (
        f"#{rid} ‚Äî {r[1]}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {r[2]}\n"
        f"–°—Ç–∞—Ç—É—Å: {r[6]}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {created}"
    )
    if r[6] not in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ"):
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"cancel_req:{rid}")]]
        )
        await q.message.reply_text(detail, reply_markup=kb)
    else:
        await q.message.reply_text(detail)
    await q.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
    )


async def cancel_request_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    rid = int(q.data.split(":")[1])
    r = await db.get_ticket(rid)
    if not r or r[5] != q.from_user.id:
        await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å.")
        return
    await db.update_status(rid, "–æ—Ç–º–µ–Ω–µ–Ω–æ")
    await q.edit_message_text(f"–ó–∞–ø—Ä–æ—Å #{rid} –æ—Ç–º–µ–Ω—ë–Ω.")
    for aid in ALL_ADMINS:
        try:
            await ctx.bot.send_message(
                aid,
                f"üîî –ó–∞–ø—Ä–æ—Å #{rid} –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {q.from_user.full_name}",
            )
        except Exception as e:
            log.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞ #%s: %s",
                aid,
                rid,
                e,
            )
    await ctx.bot.send_message(
        q.from_user.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
    )


async def init_feedback(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    rid = int(q.data.split(":")[1])
    ctx.user_data["feedback_ticket"] = rid
    await q.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–º:",
        reply_markup=CANCEL_KEYBOARD,
    )


async def handle_feedback_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    rid = ctx.user_data.get("feedback_ticket")
    if not rid:
        return

    cancel_result = await handle_cancel(update, ctx)
    if cancel_result:
        ctx.user_data.pop("feedback_ticket", None)
        return cancel_result

    txt = (update.message.text or "").strip()

    tkt = await db.get_ticket(rid)
    if not tkt:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
        )
        ctx.user_data.pop("feedback_ticket", None)
        return

    await db.update_status(rid, "–ø—Ä–∏–Ω—è—Ç–æ")

    for aid in ALL_ADMINS:
        try:
            await ctx.bot.send_message(aid, f"üí¨ –§–∏–¥–±—ç–∫ –∫ –∑–∞–ø—Ä–æ—Å—É #{rid}:\n{txt}")
            btns_s = [
                InlineKeyboardButton(s, callback_data=f"status:{rid}:{s}")
                for s in STATUS_OPTIONS
                if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
            ]
            btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{rid}")
            created = format_kyiv_time(tkt[7])
            new_text = (
                f"üîÑ –ó–∞–ø—Ä–æ—Å #{rid} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ ¬´–ø—Ä–∏–Ω—è—Ç–æ¬ª –ø–æ—Å–ª–µ —Ñ–∏–¥–±–µ–∫–∞\n"
                f"{tkt[1]}: {tkt[2]}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {tkt[3]}\n"
                f"–û—Ç: {tkt[4]}, {created}"
            )
            await ctx.bot.send_message(
                aid, new_text, reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]])
            )
        except Exception as e:
            log.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±—ç–∫ –∞–¥–º–∏–Ω—É %s –ø–æ –∑–∞–ø—Ä–æ—Å—É #%s: %s",
                aid,
                rid,
                e,
            )

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
    )
    ctx.user_data.pop("feedback_ticket", None)


async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    menu = USER_MAIN_MENU
    user = getattr(update, "effective_user", None)
    if user and getattr(user, "id", None) in ADMIN_IDS:
        menu = ADMIN_MAIN_MENU
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(menu, resize_keyboard=True),
    )
    ctx.user_data.pop("feedback_ticket", None)
    return ConversationHandler.END
