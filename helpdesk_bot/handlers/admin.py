from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from .. import db
from ..utils import (
    ADMIN_IDS,
    ADMIN_MAIN_MENU,
    STATUS_OPTIONS,
    ALL_ADMINS,
    CANCEL_KEYBOARD,
    USER_MAIN_MENU,
    format_kyiv_time,
    log,
    STATE_REPLY,
    STATE_BROADCAST,
    STATE_ARCHIVE_DATE,
    STATE_STATS_DATE,
    STATE_CRM_EDIT,
    STATE_SPEECH_EDIT,
)


async def init_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    rid = int(q.data.split(":")[1])
    ctx.user_data["reply_ticket"] = rid
    await q.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ #{rid}:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_REPLY


async def handle_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    rid = ctx.user_data.get("reply_ticket")
    tkt = await db.get_ticket(rid)
    if tkt:
        await ctx.bot.send_message(
            tkt[5], f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å #{rid}:\n{txt}"
        )
        await update.message.reply_text(
            "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
        )
    else:
        await update.message.reply_text(
            "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
        )
    return ConversationHandler.END


async def init_broadcast(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_BROADCAST


async def handle_broadcast(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    users = await db.list_users()
    sent = 0
    for uid in users:
        try:
            await ctx.bot.send_message(uid, f"üì¢ –ê–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞:\n\n{txt}")
            sent += 1
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", uid, e)
    await update.message.reply_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )
    return ConversationHandler.END


async def all_requests_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in ADMIN_IDS:
        return
    rows = await db.list_tickets()
    active = [r for r in rows if r[6] not in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ")]
    if not active:
        await ctx.bot.send_message(update.effective_chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return
    for r in active:
        rid, rowc, prob, descr, uname, uid, st, cts = r
        created = format_kyiv_time(cts)
        btns_s = [
            InlineKeyboardButton(s, callback_data=f"status:{rid}:{s}")
            for s in STATUS_OPTIONS
            if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        ]
        btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{rid}")
        await ctx.bot.send_message(
            update.effective_chat.id,
            f"#{rid} [{st}]\n{rowc}: {prob}\n–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n–û—Ç: {uname}, {created}",
            reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]]),
        )


async def init_archive(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_ARCHIVE_DATE


async def archive_date_invalid(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_ARCHIVE_DATE


async def archive_by_date_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    d = update.message.text.strip()
    all_r = await db.list_tickets()
    arch = [r for r in all_r if r[7].startswith(d) and r[6] in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ")]
    if not arch:
        await update.message.reply_text(
            f"–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {d}.",
            reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
        )
    else:
        for r in arch:
            rid, rowc, prob, descr, uname, uid, st, cts = r
            c = format_kyiv_time(cts)
            await update.message.reply_text(
                f"#{rid} [{st}]\n{rowc}: {prob}\n–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n–û—Ç: {uname}, {c}"
            )
        await update.message.reply_text(
            "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
        )
    return ConversationHandler.END


async def stats_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (YYYY-MM-DD ‚Äî YYYY-MM-DD):",
        reply_markup=CANCEL_KEYBOARD,
    )
    return STATE_STATS_DATE


async def stats_show(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    parts = [p.strip() for p in txt.split("‚Äî")]
    if len(parts) != 2:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD ‚Äî YYYY-MM-DD",
            reply_markup=CANCEL_KEYBOARD,
        )
        return STATE_STATS_DATE
    start_str, end_str = parts
    by_status = await db.count_by_status(start_str, end_str)
    by_problem = await db.count_by_problem(start_str, end_str)
    lines = [f"üìä –°—Ç–∞—Ç–∞ —Å {start_str} –ø–æ {end_str}:", "\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:"]
    for st, cnt in by_status.items():
        lines.append(f"  ‚Ä¢ {st}: {cnt}")
    lines.append("\n–ü–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:")
    for pr, cnt in by_problem.items():
        lines.append(f"  ‚Ä¢ {pr}: {cnt}")
    await update.message.reply_text(
        "\n".join(lines),
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )
    return ConversationHandler.END


async def edit_crm_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id not in ADMIN_IDS:
        return ConversationHandler.END
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç CRM:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_CRM_EDIT


async def edit_crm_save(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    await db.set_setting("crm_text", txt)
    await update.message.reply_text(
        "‚úÖ CRM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )
    return ConversationHandler.END


async def edit_speech_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id not in ADMIN_IDS:
        return ConversationHandler.END
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–ø–∏—á–∞:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_SPEECH_EDIT


async def edit_speech_save(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    await db.set_setting("speech_text", txt)
    await update.message.reply_text(
        "‚úÖ –°–ø–∏—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )
    return ConversationHandler.END


async def status_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, rid_s, new_st = q.data.split(":")
    rid = int(rid_s)
    await db.update_status(rid, new_st)

    if new_st in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ"):
        await q.edit_message_reply_markup(None)
        await q.edit_message_text(f"#{rid} ‚Äî —Å—Ç–∞—Ç—É—Å: ¬´{new_st}¬ª")
    else:
        btns_s = [
            InlineKeyboardButton(s, callback_data=f"status:{rid}:{s}")
            for s in STATUS_OPTIONS
            if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        ]
        btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{rid}")
        await q.edit_message_text(
            f"#{rid} ‚Äî —Å—Ç–∞—Ç—É—Å: ¬´{new_st}¬ª",
            reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]]),
        )

    tkt = await db.get_ticket(rid)
    if not tkt:
        return

    user_id = tkt[5]

    for aid in ALL_ADMINS:
        try:
            await ctx.bot.send_message(
                aid, f"üîî –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ¬´{new_st}¬ª"
            )
        except Exception as e:
            log.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ #%s: %s",
                aid,
                rid,
                e,
            )

    try:
        await ctx.bot.send_message(
            user_id, f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω: ¬´{new_st}¬ª"
        )
    except Exception as e:
        log.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –æ —Å—Ç–∞—Ç—É—Å–µ #%s", user_id, rid, exc_info=e
        )
        for aid in ALL_ADMINS:
            try:
                await ctx.bot.send_message(
                    aid,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ #{rid}",
                )
            except Exception as e2:
                log.warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s –æ —Å–±–æ–µ: %s", aid, e2
                )

    if new_st == "–≥–æ—Ç–æ–≤–æ":
        fb_btn = InlineKeyboardButton(
            "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞", callback_data=f"feedback:{rid}"
        )
        th_btn = InlineKeyboardButton(
            "—Å–ø–∞—Å–∏–±–æ –ª—é–±–∏–º—ã–π –∞–π—Ç–∏—à–Ω–∏–∫ <3", callback_data=f"thanks:{rid}"
        )
        await ctx.bot.send_message(
            user_id,
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ:",
            reply_markup=InlineKeyboardMarkup([[fb_btn, th_btn]]),
        )


async def handle_thanks(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    rid = int(q.data.split(":")[1])
    tkt = await db.get_ticket(rid)
    if not tkt:
        await q.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    for aid in ALL_ADMINS:
        key = f"thanks_{aid}"
        old = await db.get_setting(key) or "0"
        cnt = int(old) + 1
        await db.set_setting(key, str(cnt))
        try:
            await ctx.bot.send_message(
                aid, f"üôè –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {q.from_user.full_name} –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª –∑–∞ –∑–∞–ø—Ä–æ—Å #{rid}."
            )
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω—É %s: %s", aid, e)
    await q.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å! ‚ù§")
    await ctx.bot.send_message(
        q.from_user.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
    )


async def show_thanks_count(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    cnts = []
    for aid in ALL_ADMINS:
        v = await db.get_setting(f"thanks_{aid}") or "0"
        cnts.append(f"Admin {aid}: {v}")
    await update.message.reply_text(
        "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:\n" + "\n".join(cnts),
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )


async def clear_requests_admin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in ADMIN_IDS:
        return
    await db.clear_requests()
    await ctx.bot.send_message(
        update.effective_chat.id, "üîÑ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )


async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
    )
    return ConversationHandler.END
