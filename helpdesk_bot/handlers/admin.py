from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from .. import db
from ..utils import (
    ADMIN_IDS,
    ADMIN_MAIN_MENU,
    ADMIN_TICKETS_MENU,
    ADMIN_ANALYTICS_MENU,
    ADMIN_SETTINGS_MENU,
    ADMIN_DAILY_MESSAGE_MENU,
    DAILY_MESSAGE_EDIT_KEYBOARD,
    DAILY_MESSAGE_FORMAT_MENU,
    ADMIN_BACK_BUTTON,
    STATUS_OPTIONS,
    ALL_ADMINS,
    CANCEL_KEYBOARD,
    USER_MAIN_MENU,
    format_kyiv_time,
    log,
    STATE_ARCHIVE_DATE,
    STATE_STATS_DATE,
    STATE_CRM_EDIT,
    STATE_SPEECH_EDIT,
)


DAILY_STATE_KEY = "daily_message_state"
DAILY_STATE_MENU = "menu"
DAILY_STATE_EDIT = "edit"
DAILY_STATE_FORMAT = "format"


def _set_daily_state(ctx: ContextTypes.DEFAULT_TYPE, value: str | None) -> None:
    if value is None:
        ctx.user_data.pop(DAILY_STATE_KEY, None)
    else:
        ctx.user_data[DAILY_STATE_KEY] = value


def _get_daily_state(ctx: ContextTypes.DEFAULT_TYPE) -> str | None:
    return ctx.user_data.get(DAILY_STATE_KEY)


async def init_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    rid = int(q.data.split(":")[1])
    ctx.user_data["reply_ticket"] = rid
    await q.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ #{rid}:", reply_markup=CANCEL_KEYBOARD
    )


async def handle_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    rid = ctx.user_data.get("reply_ticket")
    if not rid:
        return

    txt = (update.message.text or "").strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        ctx.user_data.pop("reply_ticket", None)
        await cancel(update, ctx)
        return

    tkt = await db.get_ticket(rid)
    if tkt:
        await ctx.bot.send_message(
            tkt[5], f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å #{rid}:\n{txt}"
        )
        await update.message.reply_text(
            "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
        )
    else:
        await update.message.reply_text(
            "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
        )
    ctx.user_data.pop("reply_ticket", None)


def _is_admin(update: Update) -> bool:
    user = update.effective_user
    return bool(user and user.id in ADMIN_IDS)


async def show_tickets_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update):
        return
    await update.message.reply_text(
        "–†–∞–∑–¥–µ–ª ¬´–ó–∞—è–≤–∫–∏¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(ADMIN_TICKETS_MENU, resize_keyboard=True),
    )


async def show_analytics_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update):
        return
    await update.message.reply_text(
        "–†–∞–∑–¥–µ–ª ¬´–ê–Ω–∞–ª–∏—Ç–∏–∫–∞¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(ADMIN_ANALYTICS_MENU, resize_keyboard=True),
    )


async def show_settings_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update):
        return
    _set_daily_state(ctx, None)
    await update.message.reply_text(
        "–†–∞–∑–¥–µ–ª ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(ADMIN_SETTINGS_MENU, resize_keyboard=True),
    )


async def back_to_main(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update):
        return
    if _get_daily_state(ctx):
        _set_daily_state(ctx, None)
    await update.message.reply_text(
        "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )


async def all_requests_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in ADMIN_IDS:
        return
    rows = await db.list_tickets()
    active = [r for r in rows if r[6] not in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ")]
    if not active:
        await ctx.bot.send_message(update.effective_chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return
    for r in active:
        rid, rowc, prob, descr, uname, uid, st, cts = r
        created = format_kyiv_time(cts)
        btns_s = [
            InlineKeyboardButton(s, callback_data=f"status:{rid}:{s}")
            for s in STATUS_OPTIONS
            if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        ]
        btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{rid}")
        await ctx.bot.send_message(
            update.effective_chat.id,
            f"#{rid} [{st}]\n{rowc}: {prob}\n–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n–û—Ç: {uname}, {created}",
            reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]]),
        )


async def init_archive(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_ARCHIVE_DATE


async def archive_date_invalid(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_ARCHIVE_DATE


async def archive_by_date_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    d = update.message.text.strip()
    all_r = await db.list_tickets()
    arch = [r for r in all_r if r[7].startswith(d) and r[6] in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ")]
    if not arch:
        await update.message.reply_text(
            f"–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {d}.",
            reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
        )
    else:
        for r in arch:
            rid, rowc, prob, descr, uname, uid, st, cts = r
            c = format_kyiv_time(cts)
            await update.message.reply_text(
                f"#{rid} [{st}]\n{rowc}: {prob}\n–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n–û—Ç: {uname}, {c}"
            )
        await update.message.reply_text(
            "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
        )
    return ConversationHandler.END


async def stats_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (YYYY-MM-DD ‚Äî YYYY-MM-DD):",
        reply_markup=CANCEL_KEYBOARD,
    )
    return STATE_STATS_DATE


async def stats_show(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    parts = [p.strip() for p in txt.split("‚Äî")]
    if len(parts) != 2:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD ‚Äî YYYY-MM-DD",
            reply_markup=CANCEL_KEYBOARD,
        )
        return STATE_STATS_DATE
    start_str, end_str = parts
    by_status = await db.count_by_status(start_str, end_str)
    by_problem = await db.count_by_problem(start_str, end_str)
    lines = [f"üìä –°—Ç–∞—Ç–∞ —Å {start_str} –ø–æ {end_str}:", "\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:"]
    for st, cnt in by_status.items():
        lines.append(f"  ‚Ä¢ {st}: {cnt}")
    lines.append("\n–ü–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:")
    for pr, cnt in by_problem.items():
        lines.append(f"  ‚Ä¢ {pr}: {cnt}")
    await update.message.reply_text(
        "\n".join(lines),
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )
    return ConversationHandler.END


async def edit_crm_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id not in ADMIN_IDS:
        return ConversationHandler.END
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç CRM:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_CRM_EDIT


async def edit_crm_save(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    await db.set_setting("crm_text", txt)
    await update.message.reply_text(
        "‚úÖ CRM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )
    return ConversationHandler.END


async def edit_speech_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id not in ADMIN_IDS:
        return ConversationHandler.END
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–ø–∏—á–∞:", reply_markup=CANCEL_KEYBOARD
    )
    return STATE_SPEECH_EDIT


async def edit_speech_save(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    await db.set_setting("speech_text", txt)
    await update.message.reply_text(
        "‚úÖ –°–ø–∏—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )
    return ConversationHandler.END


async def _daily_overview() -> dict:
    text = await db.get_setting("daily_message_text") or ""
    parse_mode = await db.get_setting("daily_message_parse_mode") or ""
    disable_preview = (
        await db.get_setting("daily_message_disable_preview") or "0"
    ) == "1"
    chat_id = await db.get_setting("daily_message_chat_id") or ""

    parse_mode_label = {
        "": "–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
        "Markdown": "Markdown",
        "HTML": "HTML",
    }.get(parse_mode, parse_mode)
    preview_label = "–≤—ã–∫–ª—é—á–µ–Ω" if disable_preview else "–≤–∫–ª—é—á–µ–Ω"

    lines = ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (17:00 Europe/Kyiv):"]
    lines.append(text if text else "‚Äî —Ç–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω ‚Äî")
    lines.append("")
    lines.append(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {parse_mode_label}")
    lines.append(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫: {preview_label}")
    if chat_id:
        lines.append(f"–ß–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {chat_id}")
    else:
        lines.append(
            "–ß–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –µ—ë."
        )
    lines.append("")
    lines.append("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    return {
        "text": text,
        "parse_mode": parse_mode,
        "disable_preview": disable_preview,
        "chat_id": chat_id,
        "summary": "\n".join(lines),
    }


async def _send_daily_menu(update: Update) -> dict:
    overview = await _daily_overview()
    await update.message.reply_text(
        overview["summary"],
        reply_markup=ReplyKeyboardMarkup(ADMIN_DAILY_MESSAGE_MENU, resize_keyboard=True),
    )
    return overview


async def daily_message_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update):
        return
    _set_daily_state(ctx, DAILY_STATE_MENU)
    await _send_daily_menu(update)


async def daily_message_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update):
        return

    if _get_daily_state(ctx) != DAILY_STATE_MENU:
        return

    choice = update.message.text.strip()

    if choice == ADMIN_BACK_BUTTON:
        _set_daily_state(ctx, None)
        await show_settings_menu(update, ctx)
        return

    if choice == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç":
        _set_daily_state(ctx, DAILY_STATE_EDIT)
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ü—É—Å—Ç–æ¬ª.",
            reply_markup=ReplyKeyboardMarkup(DAILY_MESSAGE_EDIT_KEYBOARD, resize_keyboard=True),
        )
        return

    if choice == "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä":
        overview = await _daily_overview()
        if not overview["text"]:
            await update.message.reply_text(
                "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω.",
                reply_markup=ReplyKeyboardMarkup(
                    ADMIN_DAILY_MESSAGE_MENU, resize_keyboard=True
                ),
            )
            return
        try:
            await update.message.reply_text(
                overview["text"],
                parse_mode=overview["parse_mode"] or None,
                disable_web_page_preview=overview["disable_preview"],
            )
        except Exception as exc:  # pragma: no cover - Telegram errors are runtime only
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", exc)
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.",
                reply_markup=ReplyKeyboardMarkup(
                    ADMIN_DAILY_MESSAGE_MENU, resize_keyboard=True
                ),
            )
        return

    if choice == "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        _set_daily_state(ctx, DAILY_STATE_FORMAT)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(
                DAILY_MESSAGE_FORMAT_MENU, resize_keyboard=True
            ),
        )
        return

    if choice == "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä":
        current = await db.get_setting("daily_message_disable_preview") or "0"
        new_value = "0" if current == "1" else "1"
        await db.set_setting("daily_message_disable_preview", new_value)
        status = "–≤–∫–ª—é—á—ë–Ω" if new_value == "0" else "–≤—ã–∫–ª—é—á–µ–Ω"
        await update.message.reply_text(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ {status}.")
        await _send_daily_menu(update)
        return

    if choice == "–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await db.set_setting("daily_message_text", "")
        await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.")
        await _send_daily_menu(update)
        return

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup(ADMIN_DAILY_MESSAGE_MENU, resize_keyboard=True),
    )


async def daily_message_save(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update):
        return

    if _get_daily_state(ctx) != DAILY_STATE_EDIT:
        return

    raw_text = update.message.text or ""
    choice = raw_text.strip().lower()

    if choice == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        _set_daily_state(ctx, DAILY_STATE_MENU)
        await _send_daily_menu(update)
        return

    if choice == "–ø—É—Å—Ç–æ":
        await db.set_setting("daily_message_text", "")
        await update.message.reply_text("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        _set_daily_state(ctx, DAILY_STATE_MENU)
        await _send_daily_menu(update)
        return

    await db.set_setting("daily_message_text", raw_text)
    await update.message.reply_text("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    _set_daily_state(ctx, DAILY_STATE_MENU)
    await _send_daily_menu(update)


async def daily_message_set_format(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not _is_admin(update):
        return

    if _get_daily_state(ctx) != DAILY_STATE_FORMAT:
        return

    choice = (update.message.text or "").strip()
    lowered = choice.lower()

    if lowered == "–æ—Ç–º–µ–Ω–∞" or choice == ADMIN_BACK_BUTTON:
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        _set_daily_state(ctx, DAILY_STATE_MENU)
        await _send_daily_menu(update)
        return

    modes = {
        "–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç": "",
        "markdown": "Markdown",
        "html": "HTML",
    }

    if lowered not in modes:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(
                DAILY_MESSAGE_FORMAT_MENU, resize_keyboard=True
            ),
        )
        return

    await db.set_setting("daily_message_parse_mode", modes[lowered])
    label = "–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç" if modes[lowered] == "" else modes[lowered]
    await update.message.reply_text(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {label}.")
    _set_daily_state(ctx, DAILY_STATE_MENU)
    await _send_daily_menu(update)


async def status_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, rid_s, new_st = q.data.split(":")
    rid = int(rid_s)
    await db.update_status(rid, new_st)

    if new_st in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ"):
        await q.edit_message_reply_markup(None)
        await q.edit_message_text(f"#{rid} ‚Äî —Å—Ç–∞—Ç—É—Å: ¬´{new_st}¬ª")
    else:
        btns_s = [
            InlineKeyboardButton(s, callback_data=f"status:{rid}:{s}")
            for s in STATUS_OPTIONS
            if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        ]
        btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{rid}")
        await q.edit_message_text(
            f"#{rid} ‚Äî —Å—Ç–∞—Ç—É—Å: ¬´{new_st}¬ª",
            reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]]),
        )

    tkt = await db.get_ticket(rid)
    if not tkt:
        return

    user_id = tkt[5]

    for aid in ALL_ADMINS:
        try:
            await ctx.bot.send_message(
                aid, f"üîî –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ¬´{new_st}¬ª"
            )
        except Exception as e:
            log.warning(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ #%s: %s",
                aid,
                rid,
                e,
            )

    try:
        await ctx.bot.send_message(
            user_id, f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω: ¬´{new_st}¬ª"
        )
    except Exception as e:
        log.exception(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –æ —Å—Ç–∞—Ç—É—Å–µ #%s", user_id, rid, exc_info=e
        )
        for aid in ALL_ADMINS:
            try:
                await ctx.bot.send_message(
                    aid,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ #{rid}",
                )
            except Exception as e2:
                log.warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s –æ —Å–±–æ–µ: %s", aid, e2
                )

    if new_st == "–≥–æ—Ç–æ–≤–æ":
        fb_btn = InlineKeyboardButton(
            "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞", callback_data=f"feedback:{rid}"
        )
        th_btn = InlineKeyboardButton(
            "—Å–ø–∞—Å–∏–±–æ –ª—é–±–∏–º—ã–π –∞–π—Ç–∏—à–Ω–∏–∫ <3", callback_data=f"thanks:{rid}"
        )
        await ctx.bot.send_message(
            user_id,
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ:",
            reply_markup=InlineKeyboardMarkup([[fb_btn, th_btn]]),
        )


async def handle_thanks(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    rid = int(q.data.split(":")[1])
    tkt = await db.get_ticket(rid)
    if not tkt:
        await q.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    for aid in ALL_ADMINS:
        key = f"thanks_{aid}"
        old = await db.get_setting(key) or "0"
        cnt = int(old) + 1
        await db.set_setting(key, str(cnt))
        try:
            await ctx.bot.send_message(
                aid, f"üôè –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {q.from_user.full_name} –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª –∑–∞ –∑–∞–ø—Ä–æ—Å #{rid}."
            )
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω—É %s: %s", aid, e)
    await q.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å! ‚ù§")
    await ctx.bot.send_message(
        q.from_user.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
    )


async def show_thanks_count(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    cnts = []
    for aid in ALL_ADMINS:
        v = await db.get_setting(f"thanks_{aid}") or "0"
        cnts.append(f"Admin {aid}: {v}")
    await update.message.reply_text(
        "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:\n" + "\n".join(cnts),
        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True),
    )


async def clear_requests_admin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in ADMIN_IDS:
        return
    await db.clear_requests()
    await ctx.bot.send_message(
        update.effective_chat.id, "üîÑ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )


async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    menu = USER_MAIN_MENU
    if _is_admin(update):
        menu = ADMIN_MAIN_MENU
        if _get_daily_state(ctx):
            _set_daily_state(ctx, None)
        ctx.user_data.pop("reply_ticket", None)
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(menu, resize_keyboard=True),
    )
    return ConversationHandler.END
