# bot.py

import os
import logging
from datetime import datetime, timezone
from zoneinfo import ZoneInfo

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import db

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID   = int(os.getenv("ADMIN_CHAT_ID", "0"))
SECOND_ADMIN_ID = 7615248486
ADMIN_IDS       = {ADMIN_CHAT_ID, SECOND_ADMIN_ID}
if not TELEGRAM_TOKEN or ADMIN_CHAT_ID == 0:
    raise RuntimeError("TELEGRAM_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    STATE_ROW,
    STATE_COMP,
    STATE_PROBLEM_MENU,
    STATE_CUSTOM_DESC,
    STATE_REPLY,
    STATE_BROADCAST,
    STATE_ARCHIVE_DATE,
    STATE_STATS_DATE,
    STATE_CRM_EDIT,
    STATE_FEEDBACK_TEXT,
) = range(10)

# –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
PROBLEMS = [
    "–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ñ",
    "–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç —É—à–∏",
    "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω",
    "–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∞–π—Ç",
    "–ö–æ–º–ø –≤—ã–∫–ª—é—á–∏–ª—Å—è/–∑–∞–≤–∏—Å/—Å–≥–æ—Ä–µ–ª",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—É–º–æ–¥–∞–≤–∞",
    "–ü–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø",
    "–ü–ª–æ—Ö–æ–π –∏–Ω–µ—Ç (–∏–ª–∏ –µ–≥–æ –Ω–µ—Ç)",
    "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞",
]
STATUS_OPTIONS = ["–ø—Ä–∏–Ω—è—Ç–æ", "–≤ —Ä–∞–±–æ—Ç–µ", "–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ"]

USER_MAIN_MENU = [["–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å", "–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã"], ["–°–ø—Ä–∞–≤–∫–∞"]]
ADMIN_MAIN_MENU = [
    ["–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã", "–ê—Ä—Ö–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    ["–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å CRM"],
    ["–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏"],
]
CANCEL_KEYBOARD = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

# –ü–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å–ø—Ä–∞–≤–∫–∏
HELP_TEXT_RULES = """üìû –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–µ–π

‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ

üö´ –ù–µ –≥–æ–≤–æ—Ä–∏—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (–≤–æ–π–Ω–∞, –ø—É—Ç–∏–Ω, –°–í–û –∏ —Ç. –¥.) ‚Äî –∑–∞ —ç—Ç–æ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –±–∞–Ω —Å–∏–º–∫–∏.
üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å–ª–æ–≤: ‚ùå –ø—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ, –∑–∞–π–¥–∏—Ç–µ, –æ—Ç–∫—Ä–æ–π—Ç–µ  
‚úÖ –ì–æ–≤–æ—Ä–∏—Ç–µ –∏–Ω–∞—á–µ: ‚úîÔ∏è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–∏–∫—Ç–æ–≤–∞—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å

üìå –°–æ–±–ª—é–¥–∞–π—Ç–µ —ç—Ç–æ, —á—Ç–æ–±—ã —Å–≤—è–∑—å –Ω–µ –æ–±—Ä—ã–≤–∞–ª–∞—Å—å –∏ SIP –∂–∏–ª –¥–æ–ª—å—à–µ.

‚∏ª

‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ:

üö´ –ê–≤—Ç–æ–¥–æ–∑–≤–æ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω–µ–µ 10 —Å–µ–∫).  
ü§¨ –ú–∞—Ç (–¥–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ, –Ω–æ –≤–µ–∂–ª–∏–≤–æ).  
‚öñÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞ (–≤—ã–±–æ—Ä—ã, –≤–ª–∞—Å—Ç—å, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–∫–∞).  
üí£ –í–æ–π–Ω–∞ –∏ –º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–æ–ø—Ä–æ—Å—ã ¬´—á–µ–π –ö—Ä—ã–º?¬ª –∏ —Ç. –¥.).

‚∏ª

‚úÖ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å SIP –ø—Ä–∞–≤–∏–ª—å–Ω–æ:

‚è≥ –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏ 30 —Å–µ–∫.  
üìµ –ù–µ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –±–æ–ª–µ–µ 2‚Äì3 —Ä–∞–∑. –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–µ—Ñ–∏—Ü–∏—Ç –ª–∏–Ω–∏–π  
üõë –û—à–∏–±–∫–∞ ‚ÄúAll sockets busy now‚Äù ‚Üí –∂–¥–∏—Ç–µ 3‚Äì5 –º–∏–Ω—É—Ç.  
üìû –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ SIP –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–∞—Ö (—Ç–∞–∫—Å–∏, –æ—Ç–µ–ª–∏).  
üì± –û—à–∏–±–∫–∞ –ó–∞–Ω—è—Ç–æ/—Å–µ—Ä–≤–∏—Å —Å –≥—É–¥–∫–∞–º–∏ = –Ω–µ–¥–æ–∑–≤–æ–Ω!!!!!  
üìù –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—à–∏–±–∫—É ‚Äî –∂–¥–∏—Ç–µ –ø–ª—é—Å –∏ –Ω–µ –∑–≤–æ–Ω–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞–º –Ω–µ —Å–∫–∞–∂—É—Ç.
"""

HELP_TEXT_LINKS = """https://docs.google.com/forms/d/1YKYwRaHv0yfhHZXU4BFNymwHDP2EZSZn7NYr05DLIfM/viewform?edit_requested=true4
https://fhd154.mamoth.cloud
https://google.com
https://yandex.eu/maps
http://t-r-o-n.ru
http://kykart.ru
https://numbase.ru
https://sanstv.ru
https://www.kody.su
https://fincalculator.ru/telefon/region-po-nomeru
https://chatgpt.com
https://checksnils.ru
https://–ø—Ä–æ–≤–µ—Ä–∫–∞-–ø–∞—Å–ø–æ—Ä—Ç–∞.—Ä—Ñ
https://proverk.ru
https://www.egrul.ru/inn
https://8sot.su
https://randomus.ru
https://2gis.ru
"""

HELP_TEXT_SPEECH = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è –ú–ì–¢–°. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–≥–µ–Ω–∏–π.  
–ó–≤–æ–Ω–∏–º –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –î–æ–ª–∂–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –≤–∞—Å, —á—Ç–æ —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –≤–∞—à –≥–æ—Ä–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.

‚Äî –ü–æ—á–µ–º—É –≤—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞?  
‚Äî –Ø –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å.

‚Äî –ü–æ—á–µ–º—É —Ç–æ–≥–¥–∞ –≤—ã –Ω–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º –Ω–∞ —É–∑–µ–ª —Å–≤—è–∑–∏?  
‚Äî –Ø –Ω–µ –∑–Ω–∞–ª–∞.

–í–∞–º 5 —è–Ω–≤–∞—Ä—è –±—ã–ª–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –ø–æ –ø–æ—á—Ç–µ, –≤—ã –µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–ª–∏?  
‚Äî –ù–µ—Ç.

–ü—Ä–æ–≤–µ—Ä—è–ª–∏ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫?  
‚Äî –ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ!

–í–∏–¥–∏–º–æ, –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ —Å–Ω–æ–≤–∞ –ø–æ–¥–≤–µ–ª–∞! –õ–∞–¥–Ω–æ, –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º?  
–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ –∑–∞–º–µ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –æ–ø—Ç–æ–≤–æ–ª–æ–∫–Ω–æ: –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è —Å 7495 –Ω–∞ 7499. –ó–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä!

(–î–∏–∫—Ç—É—é –Ω–æ–º–µ—Ä)

–°–µ–π—á–∞—Å –∑–∞–º–µ–Ω–∞ –ª–∏–Ω–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞ —Å—á—ë—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ ‚Äî –≤–∞–º –ø–ª–∞—Ç–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –í —Ç–µ—á–µ–Ω–∏–µ 2 –¥–Ω–µ–π –ª–∏–Ω–∏–∏ –ø–æ–º–µ–Ω—è—é—Ç, –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ.

–¢–µ –∞–±–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –æ—Ç –Ω–æ–º–µ—Ä–∞, —Å–º–æ–≥—É—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–æ–≤—ã–π —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞ (–æ–ø–ª–∞—á–∏–≤–∞—è –≤—Å–µ —É—Å–ª—É–≥–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ ‚Äî –º–∞—Å—Ç–µ—Ä, –æ–ø—Ç–æ–≤–æ–ª–æ–∫–Ω–æ, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ; –ø—Ä–∏–º–µ—Ä–Ω–æ 20 000 ‚ÇΩ).

–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ —Ü–µ–Ω—Ç—Ä –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞ –Ω–æ–≤—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏. –î–ª—è —ç—Ç–æ–≥–æ –≤—Å—Ç–∞–Ω—å—Ç–µ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å:  
‚Äî –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É?  
‚Äî –ù–∞ 25.  
‚Äî –î–æ –∏–ª–∏ –ø–æ—Å–ª–µ 12?  
‚Äî –î–æ 12.

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç SMS –Ω–∞ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:  
‚Äî 79‚Ä¶.

–ü–æ —Å—Ç–∞—Ä–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è:  
- –§.–ò.–û.  
- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è  
- –ê–¥—Ä–µ—Å  
‚Äî –í—Å—ë –≤–µ—Ä–Ω–æ?  
‚Äî –î–∞.

–û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —Å —Ç–∞–ª–æ–Ω–æ–º.

–ü–æ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–∞–º –ø–æ–ª–∞–≥–∞—é—Ç—Å—è –ª—å–≥–æ—Ç—ã (–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä–∞–Ω, –¥–æ–Ω–æ—Ä, —Ä–µ–±—ë–Ω–æ–∫ –≤–æ–π–Ω—ã).  
‚Äî –£ –º–µ–Ω—è –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å.  
–í–∞–º —Å–∫–∏–¥–∫–∞ 60%. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (–ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ –°–ù–ò–õ–°):  
‚Äî 5656 565 656.

–ü–æ–¥–æ–π–¥–∏—Ç–µ –≤ —Ü–µ–Ω—Ç—Ä –∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–º.

–ï—Å—Ç—å —Å–µ–º–µ–π–Ω—ã–π —Ç–∞—Ä–∏—Ñ ‚Äî –µ—Å–ª–∏ –æ–±–∞ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã, —Å–∫–∏–¥–∫–∞ –µ—â—ë 50 ‚ÇΩ.  
‚Äî –Ø —Å –º—É–∂–µ–º.

–ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –ª—å–≥–æ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –ø–ª–∞—Ç—ë–∂ 122 ‚ÇΩ. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫–∞–∂–∏—Ç–µ:  
¬´–Ø, –§–ò–û, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –ª—å–≥–æ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ¬ª.  
‚Äî –Ø, –§–ò–û, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –ª—å–≥–æ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.

–ì–æ—Ç–æ–≤–æ! –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é.
"""

def format_kyiv_time(ts: str) -> str:
    try:
        dt = datetime.fromisoformat(ts).replace(tzinfo=timezone.utc)
        return dt.astimezone(ZoneInfo("Europe/Kiev")).strftime("%Y-%m-%d %H:%M:%S")
    except:
        return ts

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Handlers

async def start_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await db.init_db()
    u = update.effective_user
    await db.add_user(u.id, u.full_name)
    menu = ADMIN_MAIN_MENU if u.id in ADMIN_IDS else USER_MAIN_MENU
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(menu, resize_keyboard=True))
    return ConversationHandler.END

# ‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî

async def start_conversation(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—è–¥–∞ (1‚Äì6):", reply_markup=CANCEL_KEYBOARD)
    return STATE_ROW

async def row_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    if not txt.isdigit() or not (1 <= int(txt) <= 6):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä—è–¥. –í–≤–µ–¥–∏—Ç–µ 1‚Äì6:", reply_markup=CANCEL_KEYBOARD)
        return STATE_ROW
    ctx.user_data["row"] = txt
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:", reply_markup=CANCEL_KEYBOARD)
    return STATE_COMP

async def comp_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    row = int(ctx.user_data["row"])
    max_comp = 9 if row in (5, 6) else 10
    if not txt.isdigit() or not (1 <= int(txt) <= max_comp):
        await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–º–ø. –í–≤–µ–¥–∏—Ç–µ 1‚Äì{max_comp}:", reply_markup=CANCEL_KEYBOARD)
        return STATE_COMP
    ctx.user_data["comp"] = txt
    ctx.user_data["row_comp"] = f"{ctx.user_data['row']}/{txt}"
    kb = [PROBLEMS[i:i+2] for i in range(0, len(PROBLEMS), 2)] + [["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True))
    return STATE_PROBLEM_MENU

async def problem_menu_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ch = update.message.text.strip()
    if ch == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    if ch not in PROBLEMS:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=CANCEL_KEYBOARD)
        return STATE_PROBLEM_MENU
    ctx.user_data["problem"] = ch
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∫—Ä–∞—Ç–∫–æ:", reply_markup=CANCEL_KEYBOARD)
    return STATE_CUSTOM_DESC

async def custom_desc_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    ctx.user_data["description"] = txt
    return await send_request(update, ctx)

async def send_request(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    rowc = ctx.user_data["row_comp"]
    prob = ctx.user_data["problem"]
    desc = ctx.user_data["description"]
    user = update.effective_user
    req_id = await db.add_ticket(rowc, prob, desc, user.full_name, user.id)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø—Ä–æ—Å #{req_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–†/–ö: {rowc}\n{prob}. {desc}",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),
    )

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É(–∞–º)
    if prob == "–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ñ":
        recs = [ADMIN_CHAT_ID, SECOND_ADMIN_ID]
    else:
        recs = [ADMIN_CHAT_ID]

    btns_s = [InlineKeyboardButton(s, callback_data=f"status:{req_id}:{s}") for s in STATUS_OPTIONS if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"]
    btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{req_id}")
    created = format_kyiv_time((await db.get_ticket(req_id))[7])
    admin_text = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #{req_id}\n{rowc}: {prob}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n–û—Ç: {user.full_name}, {created}"
    markup = InlineKeyboardMarkup([btns_s, [btn_r]])
    for aid in recs:
        await ctx.bot.send_message(aid, admin_text, reply_markup=markup)

    return ConversationHandler.END

# ‚Äî –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã ‚Äî

async def my_requests(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    rowc = ctx.user_data.get("row_comp", "")
    all_r = await db.list_tickets()
    mine = [r for r in all_r if r[5] == uid and r[1] == rowc]
    if not mine:
        await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {rowc}.", reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))
        return
    btns = [[InlineKeyboardButton(f"#{r[0]} ({r[1]}) [{r[6]}] {r[2]}", callback_data=f"show:{r[0]}")] for r in mine]
    await update.message.reply_text("–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:", reply_markup=InlineKeyboardMarkup(btns))

async def show_request(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    rid = int(q.data.split(":")[1])
    r = await db.get_ticket(rid)
    rowc = ctx.user_data.get("row_comp", "")
    if not r or r[5] != q.from_user.id or r[1] != rowc:
        await q.edit_message_reply_markup(None)
        await q.message.reply_text("–ù–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.", reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))
        return
    await q.edit_message_reply_markup(None)
    created = format_kyiv_time(r[7])
    detail = f"#{rid} ‚Äî {r[1]}\n–ü—Ä–æ–±–ª–µ–º–∞: {r[2]}\n–°—Ç–∞—Ç—É—Å: {r[6]}\n–°–æ–∑–¥–∞–Ω–æ: {created}"
    if r[6] not in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ"):
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"cancel_req:{rid}")]])
        await q.message.reply_text(detail, reply_markup=kb)
    else:
        await q.message.reply_text(detail)
    await q.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))

async def cancel_request_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    rid = int(q.data.split(":")[1])
    r = await db.get_ticket(rid)
    if not r or r[5] != q.from_user.id:
        await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å.")
        return
    await db.update_status(rid, "–æ—Ç–º–µ–Ω–µ–Ω–æ")
    await q.edit_message_text(f"–ó–∞–ø—Ä–æ—Å #{rid} –æ—Ç–º–µ–Ω—ë–Ω.")
    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    if r[2] == "–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ñ":
        await ctx.bot.send_message(ADMIN_CHAT_ID, f"üîî –ó–∞–ø—Ä–æ—Å #{rid} –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {q.from_user.full_name}")
        await ctx.bot.send_message(SECOND_ADMIN_ID, f"üîî –ó–∞–ø—Ä–æ—Å #{rid} –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {q.from_user.full_name}")
    else:
        await ctx.bot.send_message(ADMIN_CHAT_ID, f"üîî –ó–∞–ø—Ä–æ—Å #{rid} –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {q.from_user.full_name}")
    await ctx.bot.send_message(q.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))

# ‚Äî –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ ‚Äî

async def init_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    rid = int(q.data.split(":")[1])
    ctx.user_data["reply_ticket"] = rid
    await q.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ #{rid}:", reply_markup=CANCEL_KEYBOARD)
    return STATE_REPLY

async def handle_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    rid = ctx.user_data.get("reply_ticket")
    tkt = await db.get_ticket(rid)
    if tkt:
        await ctx.bot.send_message(tkt[5], f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å #{rid}:\n{txt}")
        await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))
    else:
        await update.message.reply_text("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END

# ‚Äî –†–∞—Å—Å—ã–ª–∫–∞ ‚Äî

async def init_broadcast(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=CANCEL_KEYBOARD)
    return STATE_BROADCAST

async def handle_broadcast(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    users = await db.list_users(); sent = 0
    for uid in users:
        try:
            await ctx.bot.send_message(uid, f"üì¢ –ê–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞:\n\n{txt}")
            sent += 1
        except:
            pass
    await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END

# ‚Äî –°–ø—Ä–∞–≤–∫–∞ –∏ CRM ‚Äî

async def help_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [
        ["–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏", "–°—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã"],
        ["–°–ø–∏—á",            "CRM"],
        ["–ù–∞–∑–∞–¥"]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def rules_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT_RULES)
    await help_menu(update, ctx)

async def links_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(HELP_TEXT_LINKS)
    await help_menu(update, ctx)

async def speech_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(HELP_TEXT_SPEECH)
    await help_menu(update, ctx)

async def crm_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    raw = await db.get_setting("crm_text") or ""
    lines = []
    for ln in raw.splitlines():
        ln = ln.strip()
        if not ln:
            continue
        parts = ln.rsplit(" ", 2)
        if len(parts) == 3:
            name, team, code = parts
            lines.append(f"{name} ({team}) {code}")
        else:
            lines.append(ln)
    await update.message.reply_text("\n".join(lines))
    await help_menu(update, ctx)

async def back_to_main(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await start_menu(update, ctx)

# ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å CRM ‚Äî

async def edit_crm_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id not in ADMIN_IDS:
        return
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç CRM:", reply_markup=CANCEL_KEYBOARD)
    return STATE_CRM_EDIT

async def edit_crm_save(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    await db.set_setting("crm_text", txt)
    await update.message.reply_text("‚úÖ CRM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END

# ‚Äî –ê–¥–º–∏–Ω: –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, –∞—Ä—Ö–∏–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ—á–∏—Å—Ç–∫–∞, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ ‚Äî

async def all_requests_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in ADMIN_IDS:
        return
    rows = await db.list_tickets()
    active = [r for r in rows if r[6] not in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ")]
    if not active:
        await ctx.bot.send_message(update.effective_chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return
    for r in active:
        rid, rowc, prob, descr, uname, uid, st, cts = r
        created = format_kyiv_time(cts)
        btns_s = [InlineKeyboardButton(s, callback_data=f"status:{rid}:{s}") for s in STATUS_OPTIONS if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"]
        btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{rid}")
        await ctx.bot.send_message(
            update.effective_chat.id,
            f"#{rid} [{st}]\n{rowc}: {prob}\n–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n–û—Ç: {uname}, {created}",
            reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]])
        )

async def init_archive(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):", reply_markup=CANCEL_KEYBOARD)
    return STATE_ARCHIVE_DATE

async def archive_date_invalid(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:", reply_markup=CANCEL_KEYBOARD)
    return STATE_ARCHIVE_DATE

async def archive_by_date_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    d = update.message.text.strip()
    all_r = await db.list_tickets()
    arch = [r for r in all_r if r[7].startswith(d) and r[6] in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ")]
    if not arch:
        await update.message.reply_text(f"–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {d}.", reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))
    else:
        for r in arch:
            rid, rowc, prob, descr, uname, uid, st, cts = r
            c = format_kyiv_time(cts)
            await update.message.reply_text(f"#{rid} [{st}]\n{rowc}: {prob}\n–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n–û—Ç: {uname}, {c}")
        await update.message.reply_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END

async def stats_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (YYYY-MM-DD ‚Äî YYYY-MM-DD):",
        reply_markup=CANCEL_KEYBOARD
    )
    return STATE_STATS_DATE

async def stats_show(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    parts = [p.strip() for p in txt.split("‚Äî")]
    if len(parts) != 2:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD ‚Äî YYYY-MM-DD", reply_markup=CANCEL_KEYBOARD)
        return STATE_STATS_DATE
    start_str, end_str = parts
    by_status = await db.count_by_status(start_str, end_str)
    by_problem = await db.count_by_problem(start_str, end_str)
    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å {start_str} –ø–æ {end_str}:", "\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:"]
    for st, cnt in by_status.items():
        lines.append(f"  ‚Ä¢ {st}: {cnt}")
    lines.append("\n–ü–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:")
    for pr, cnt in by_problem.items():
        lines.append(f"  ‚Ä¢ {pr}: {cnt}")
    await update.message.reply_text("\n".join(lines), reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END

async def status_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    _, rid_s, new_st = q.data.split(":"); rid = int(rid_s)
    await db.update_status(rid, new_st)

    if new_st in ("–≥–æ—Ç–æ–≤–æ", "–æ—Ç–º–µ–Ω–µ–Ω–æ"):
        await q.edit_message_reply_markup(None)
        await q.edit_message_text(f"#{rid} ‚Äî —Å—Ç–∞—Ç—É—Å: ¬´{new_st}¬ª")
    else:
        btns_s = [InlineKeyboardButton(s, callback_data=f"status:{rid}:{s}") for s in STATUS_OPTIONS if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"]
        btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{rid}")
        await q.edit_message_text(f"#{rid} ‚Äî —Å—Ç–∞—Ç—É—Å: ¬´{new_st}¬ª", reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]]))

    tkt = await db.get_ticket(rid)
    if not tkt:
        return

    user_id = tkt[5]
    problem = tkt[2]

    # Notify admin(s)
    if problem == "–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ñ":
        await ctx.bot.send_message(ADMIN_CHAT_ID, f"üîî –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ¬´{new_st}¬ª")
        await ctx.bot.send_message(SECOND_ADMIN_ID, f"üîî –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ¬´{new_st}¬ª")
    else:
        await ctx.bot.send_message(ADMIN_CHAT_ID, f"üîî –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ¬´{new_st}¬ª")

    # Notify user
    await ctx.bot.send_message(user_id, f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ #{rid} –æ–±–Ω–æ–≤–ª—ë–Ω: ¬´{new_st}¬ª")

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å "–≥–æ—Ç–æ–≤–æ", –¥–∞—ë–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏: "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞" –∏ "—Å–ø–∞—Å–∏–±–æ –ª—é–±–∏–º—ã–π –∞–π—Ç–∏—à–Ω–∏–∫ <3"
    if new_st == "–≥–æ—Ç–æ–≤–æ":
        feedback_btn = InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞", callback_data=f"feedback:{rid}")
        thanks_btn = InlineKeyboardButton("—Å–ø–∞—Å–∏–±–æ –ª—é–±–∏–º—ã–π –∞–π—Ç–∏—à–Ω–∏–∫ <3", callback_data=f"thanks:{rid}")
        await ctx.bot.send_message(
            user_id,
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:",
            reply_markup=InlineKeyboardMarkup([[feedback_btn, thanks_btn]])
        )

async def init_feedback(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    rid = int(q.data.split(":")[1])
    ctx.user_data["feedback_ticket"] = rid
    await q.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–º:", reply_markup=CANCEL_KEYBOARD)
    return STATE_FEEDBACK_TEXT

async def handle_feedback_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    if txt == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, ctx)
    rid = ctx.user_data.get("feedback_ticket")
    tkt = await db.get_ticket(rid)
    if not tkt:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ "–ø—Ä–∏–Ω—è—Ç–æ"
    await db.update_status(rid, "–ø—Ä–∏–Ω—è—Ç–æ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É(–∞–º) —Å —Ç–µ–∫—Å—Ç–æ–º —Ñ–∏–¥–±–µ–∫–∞
    problem = tkt[2]
    feedback_msg = f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª —Ñ–∏–¥–±—ç–∫ –∫ –∑–∞–ø—Ä–æ—Å—É #{rid}:\n{txt}"
    recipients = [ADMIN_CHAT_ID] if problem != "–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ñ" else [ADMIN_CHAT_ID, SECOND_ADMIN_ID]
    for aid in recipients:
        await ctx.bot.send_message(aid, feedback_msg)

    # –¢–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ —à–ª—ë–º –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–∞–∫ –æ –Ω–æ–≤–æ–º, –Ω–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ø—Ä–∏–Ω—è—Ç–æ"
    rowc, prob, descr, uname = tkt[1], tkt[2], tkt[3], tkt[4]
    created = format_kyiv_time(tkt[7])
    new_text = (
        f"üîÑ –ó–∞–ø—Ä–æ—Å #{rid} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ ¬´–ø—Ä–∏–Ω—è—Ç–æ¬ª –ø–æ—Å–ª–µ —Ñ–∏–¥–±–µ–∫–∞\n"
        f"{rowc}: {prob}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {descr}\n"
        f"–û—Ç: {uname}, {created}"
    )
    btns_s = [InlineKeyboardButton(s, callback_data=f"status:{rid}:{s}") for s in STATUS_OPTIONS if s != "–æ—Ç–º–µ–Ω–µ–Ω–æ"]
    btn_r = InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{rid}")
    markup = InlineKeyboardMarkup([btns_s, [btn_r]])

    for aid in recipients:
        await ctx.bot.send_message(aid, new_text, reply_markup=markup)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ó–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –Ω–æ–≤—ã–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True)
    )
    return ConversationHandler.END

async def handle_thanks(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    rid = int(q.data.split(":")[1])
    tkt = await db.get_ticket(rid)
    if not tkt:
        await q.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    problem = tkt[2]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –∑–∞—è–≤–∫–∞: –µ—Å–ª–∏ "–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ñ" ‚Äì —Ç–æ –¥–≤—É–º, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ ADMIN_CHAT_ID
    recipients = [ADMIN_CHAT_ID] if problem != "–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ñ" else [ADMIN_CHAT_ID, SECOND_ADMIN_ID]

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ "thanks_<admin_id>"
    for aid in recipients:
        key = f"thanks_{aid}"
        old = await db.get_setting(key)
        count = int(old) if old and old.isdigit() else 0
        count += 1
        await db.set_setting(key, str(count))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        uname = q.from_user.full_name
        thanks_msg = f"üôè –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uname} –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª –∑–∞ –∑–∞–ø—Ä–æ—Å #{rid}."
        await ctx.bot.send_message(aid, thanks_msg)

    await q.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å! ‚ù§")
    await ctx.bot.send_message(q.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))

async def show_thanks_count(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    # –ß–∏—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏
    count1 = 0
    count2 = 0
    old1 = await db.get_setting(f"thanks_{ADMIN_CHAT_ID}")
    if old1 and old1.isdigit():
        count1 = int(old1)
    old2 = await db.get_setting(f"thanks_{SECOND_ADMIN_ID}")
    if old2 and old2.isdigit():
        count2 = int(old2)

    text = (
        f"–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:\n"
        f"‚Ä¢ Admin (ID: {ADMIN_CHAT_ID}): {count1}\n"
        f"‚Ä¢ Admin (ID: {SECOND_ADMIN_ID}): {count2}"
    )
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))

async def clear_requests_admin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id not in ADMIN_IDS:
        return
    await db.clear_requests()
    await ctx.bot.send_message(update.effective_chat.id, "üîÑ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # ConversationHandlers
    conv_ticket = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å$"), start_conversation)],
        states={
            STATE_ROW:          [MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel), MessageHandler(filters.TEXT & ~filters.COMMAND, row_handler)],
            STATE_COMP:         [MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel), MessageHandler(filters.TEXT & ~filters.COMMAND, comp_handler)],
            STATE_PROBLEM_MENU: [MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel), MessageHandler(filters.TEXT & ~filters.COMMAND, problem_menu_handler)],
            STATE_CUSTOM_DESC:  [MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel), MessageHandler(filters.TEXT & ~filters.COMMAND, custom_desc_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
    )
    conv_reply = ConversationHandler(
        entry_points=[CallbackQueryHandler(init_reply, pattern=r"^reply:\d+$")],
        states={ STATE_REPLY: [ MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel), MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply) ] },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
    )
    conv_broadcast = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ$"), init_broadcast)],
        states={ STATE_BROADCAST: [ MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel), MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast) ] },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
    )
    conv_archive = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ê—Ä—Ö–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤$"), init_archive)],
        states={
            STATE_ARCHIVE_DATE:[
                MessageHandler(filters.Regex(r"^\d{4}-\d{2}-\d{2}$"), archive_by_date_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, archive_date_invalid),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
    )
    conv_stats = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats_start)],
        states={ STATE_STATS_DATE: [ MessageHandler(filters.TEXT & ~filters.COMMAND, stats_show) ] },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
    )
    conv_crm = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å CRM$"), edit_crm_start)],
        states={ STATE_CRM_EDIT: [ MessageHandler(filters.TEXT & ~filters.COMMAND, edit_crm_save) ] },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
    )
    conv_feedback = ConversationHandler(
        entry_points=[CallbackQueryHandler(init_feedback, pattern=r"^feedback:\d+$")],
        states={ STATE_FEEDBACK_TEXT: [ MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback_text), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel) ]},
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler("start", start_menu))

    app.add_handler(conv_ticket)
    app.add_handler(conv_reply)
    app.add_handler(conv_broadcast)
    app.add_handler(conv_archive)
    app.add_handler(conv_stats)
    app.add_handler(conv_crm)
    app.add_handler(conv_feedback)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(MessageHandler(filters.Regex("^–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã$"), my_requests))

    # –°–ø—Ä–∞–≤–∫–∞ –∏ CRM
    app.add_handler(MessageHandler(filters.Regex("^–°–ø—Ä–∞–≤–∫–∞$"), help_menu))
    app.add_handler(MessageHandler(filters.Regex("^–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏$"), rules_handler))
    app.add_handler(MessageHandler(filters.Regex("^–°—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã$"), links_handler))
    app.add_handler(MessageHandler(filters.Regex("^–°–ø–∏—á$"), speech_handler))
    app.add_handler(MessageHandler(filters.Regex("^CRM$"), crm_handler))
    app.add_handler(MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back_to_main))

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.Regex("^–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã$"), all_requests_cmd))
    app.add_handler(MessageHandler(filters.Regex("^–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã$"), clear_requests_admin))
    app.add_handler(MessageHandler(filters.Regex("^–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏$"), show_thanks_count))

    # CallbackQueryHandlers
    app.add_handler(CallbackQueryHandler(show_request, pattern=r"^show:\d+$"))
    app.add_handler(CallbackQueryHandler(cancel_request_callback, pattern=r"^cancel_req:\d+$"))
    app.add_handler(CallbackQueryHandler(status_callback, pattern=r"^status:\d+:"))
    app.add_handler(CallbackQueryHandler(handle_thanks, pattern=r"^thanks:\d+$"))

    app.run_polling()

if __name__ == "__main__":
    main()
