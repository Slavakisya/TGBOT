Index: helpdesk_bot/bot.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\nimport os\r\nimport logging\r\nfrom datetime import datetime, timezone\r\nfrom zoneinfo import ZoneInfo\r\n\r\nfrom telegram import (\r\n    Update,\r\n    ReplyKeyboardMarkup,\r\n    InlineKeyboardButton,\r\n    InlineKeyboardMarkup,\r\n)\r\nfrom telegram.ext import (\r\n    ApplicationBuilder,\r\n    CommandHandler,\r\n    MessageHandler,\r\n    CallbackQueryHandler,\r\n    ConversationHandler,\r\n    ContextTypes,\r\n    filters,\r\n)\r\nimport db\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\nTELEGRAM_TOKEN  = os.getenv(\"TELEGRAM_TOKEN\")\r\nADMIN_CHAT_ID   = int(os.getenv(\"ADMIN_CHAT_ID\", \"0\"))\r\nSECOND_ADMIN_ID = 7615248486\r\nADMIN_IDS       = {ADMIN_CHAT_ID, SECOND_ADMIN_ID}\r\nALL_ADMINS      = list(ADMIN_IDS)   # ВСЕ админы получают уведомления\r\n\r\nif not TELEGRAM_TOKEN or ADMIN_CHAT_ID == 0:\r\n    raise RuntimeError(\"TELEGRAM_TOKEN или ADMIN_CHAT_ID не установлены\")\r\n\r\n# ─── Состояния разговоров ─────────────────────────────────────────────────────\r\n(\r\n    STATE_ROW,\r\n    STATE_COMP,\r\n    STATE_PROBLEM_MENU,\r\n    STATE_CUSTOM_DESC,\r\n    STATE_REPLY,\r\n    STATE_BROADCAST,\r\n    STATE_ARCHIVE_DATE,\r\n    STATE_STATS_DATE,\r\n    STATE_CRM_EDIT,\r\n    STATE_FEEDBACK_TEXT,\r\n) = range(10)\r\n\r\n# ─── Константы ────────────────────────────────────────────────────────────────\r\nPROBLEMS = [\r\n    \"Вопросы по тф\",\r\n    \"Не работают уши\",\r\n    \"Не работает микрофон\",\r\n    \"Не открывается сайт\",\r\n    \"Комп выключился/завис/сгорел\",\r\n    \"Настройка шумодава\",\r\n    \"Плохо работает комп\",\r\n    \"Плохой инет (или его нет)\",\r\n    \"Другая проблема\",\r\n]\r\nSTATUS_OPTIONS    = [\"принято\", \"в работе\", \"готово\", \"отменено\"]\r\nUSER_MAIN_MENU    = [[\"Создать запрос\", \"Мои запросы\"], [\"Справка\"]]\r\nADMIN_MAIN_MENU   = [\r\n    [\"Все запросы\", \"Архив запросов\", \"Статистика\"],\r\n    [\"Очистить все запросы\", \"Отправить всем сообщение\", \"Изменить CRM\"],\r\n    [\"Благодарности\"],\r\n]\r\nCANCEL_KEYBOARD   = ReplyKeyboardMarkup([[\"Отмена\"]], resize_keyboard=True)\r\n\r\n# ─── Тексты справки ───────────────────────────────────────────────────────────\r\nHELP_TEXT_RULES = \"\"\"\uD83D\uDCDE Правила пользования телефонией\r\n\r\n⚠\uFE0F Триггеры в разговоре\r\n\r\n\uD83D\uDEAB Не говорите стоп-слова (война, путин, СВО и т. д.) — за это моментальный бан симки.\r\n\uD83D\uDEAB Избегайте командных слов: ❌ продиктуйте, зайдите, откройте  \r\n✅ Говорите иначе: ✔\uFE0F необходимо продиктовать, вам нужно сказать\r\n\r\n\uD83D\uDCCC Соблюдайте это, чтобы связь не обрывалась и SIP жил дольше.\r\n\r\n⸻\r\n\r\n❌ Категорически запрещено:\r\n\r\n\uD83D\uDEAB Автодозвон (интервал менее 10 сек).  \r\n\uD83E\uDD2C Мат (давить можно, но вежливо).  \r\n⚖\uFE0F Политика (выборы, власть, международка).  \r\n\uD83D\uDCA3 Война и минирования (вопросы «чей Крым?» и т. д.).\r\n\r\n⸻\r\n\r\n✅ Как работать с SIP правильно:\r\n\r\n⏳ Перерыв между звонками 30 сек.  \r\n\uD83D\uDCF5 Не звоните на один номер более 2–3 раз. Только если это не дефицит линий  \r\n\uD83D\uDED1 Ошибка “All sockets busy now” → ждите 3–5 минут.  \r\n\uD83D\uDCDE Проверяйте SIP на случайных номерах (такси, отели).  \r\n\uD83D\uDCF1 Ошибка Занято/сервис с гудками = недозвон!!!!!  \r\n\uD83D\uDCDD Отправили ошибку — ждите плюс и не звоните, пока вам не скажут.\r\n\"\"\"\r\n\r\nHELP_TEXT_LINKS = \"\"\"https://docs.google.com/forms/d/1YKYwRaHv0yfhHZXU4BFNymwHDP2EZSZn7NYr05DLIfM/viewform?edit_requested=true4\r\nhttps://fhd154.mamoth.cloud\r\nhttps://google.com\r\nhttps://yandex.eu/maps\r\nhttp://t-r-o-n.ru\r\nhttp://kykart.ru\r\nhttps://numbase.ru\r\nhttps://sanstv.ru\r\nhttps://www.kody.su\r\nhttps://fincalculator.ru/telefon/region-po-nomeru\r\nhttps://chatgpt.com\r\nhttps://checksnils.ru\r\nhttps://проверка-паспорта.рф\r\nhttps://proverk.ru\r\nhttps://www.egrul.ru/inn\r\nhttps://8sot.su\r\nhttps://randomus.ru\r\nhttps://2gis.ru\r\nhttps://geostudy.ru/timemap.html\r\n\"\"\"\r\n\r\nHELP_TEXT_SPEECH = \"\"\"Здравствуйте. Вас приветствует компания МГТС. Меня зовут Евгений.  \r\nЗвоним касательно вашего городского номера. Должны предупредить вас, что с завтрашнего дня ваш городской номер будет отключен.\r\n\r\n— Почему вы решили отказаться от городского телефона?  \r\n— Я не отказываюсь.\r\n\r\n— Почему тогда вы не обратились к нам на узел связи?  \r\n— Я не знала.\r\n\r\nВам 5 января было направлено письмо по почте, вы его не получали?  \r\n— Нет.\r\n\r\nПроверяли почтовый ящик?  \r\n— Ничего не было!\r\n\r\nВидимо, Почта России снова подвела! Ладно, вы планируете пользоваться телефоном?  \r\nОтключение номера происходит из-за замены оборудования на оптоволокно: префикс изменится с 7495 на 7499. Запишите новый номер!\r\n\r\n(Диктую номер)\r\n\r\nСейчас замена линий происходит за счёт государства — вам платить не нужно. В течение 2 дней линии поменяют, качество связи станет лучше.\r\n\r\nТе абоненты, которые отказываются от номера, смогут подать заявку на новый только через 2 месяца (оплачивая все услуги самостоятельно — мастер, оптоволокно, подключение; примерно 20 000 ₽).\r\n\r\nПосле смены приходите в центр обслуживания за новыми документами и реквизитами. Для этого встаньте в электронную очередь:  \r\n— На какую дату?  \r\n— На 25.  \r\n— До или после 12?  \r\n— До 12.\r\n\r\nПодтверждение придёт SMS на ваш мобильный номер:  \r\n— 79….\r\n\r\nПо старому договору отображается:  \r\n- Ф.И.О.  \r\n- Дата рождения  \r\n- Адрес  \r\n— Всё верно?  \r\n— Да.\r\n\r\nОтправляем SMS с талоном.\r\n\r\nПо госпрограмме вам полагаются льготы (инвалидность, ветеран, донор, ребёнок войны).  \r\n— У меня инвалидность.  \r\nВам скидка 60%. Для оформления подтвердите документ (паспорт или СНИЛС):  \r\n— 5656 565 656.\r\n\r\nПодойдите в центр за договором.\r\n\r\nЕсть семейный тариф — если оба пенсионеры, скидка ещё 50 ₽.  \r\n— Я с мужем.\r\n\r\nПереводим на льготное обслуживание, платёж 122 ₽. Для подтверждения скажите:  \r\n«Я, ФИО, подтверждаю перевод на льготное обслуживание».  \r\n— Я, ФИО, подтверждаю перевод на льготное обслуживание.\r\n\r\nГотово! Если будут вопросы — обращайтесь на горячую линию.\r\n\"\"\"\r\n\r\ndef format_kyiv_time(ts: str) -> str:\r\n    try:\r\n        dt = datetime.fromisoformat(ts).replace(tzinfo=timezone.utc)\r\n        return dt.astimezone(ZoneInfo(\"Europe/Kiev\")).strftime(\"%Y-%m-%d %H:%M:%S\")\r\n    except:\r\n        return ts\r\n\r\n# ─── Handlers ─────────────────────────────────────────────────────────────────\r\n\r\nasync def start_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    await db.init_db()\r\n    u = update.effective_user\r\n    await db.add_user(u.id, u.full_name)\r\n    menu = ADMIN_MAIN_MENU if u.id in ADMIN_IDS else USER_MAIN_MENU\r\n    await update.message.reply_text(\"Привет! Выберите действие:\",\r\n                                    reply_markup=ReplyKeyboardMarkup(menu, resize_keyboard=True))\r\n    return ConversationHandler.END\r\n\r\n# — Создание запроса —\r\n\r\nasync def start_conversation(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    await update.message.reply_text(\"Введите номер ряда (1–6):\", reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_ROW\r\n\r\nasync def row_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    txt = update.message.text.strip()\r\n    if txt == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    if not txt.isdigit() or not (1 <= int(txt) <= 6):\r\n        await update.message.reply_text(\"Неверный ряд. Введите 1–6:\", reply_markup=CANCEL_KEYBOARD)\r\n        return STATE_ROW\r\n    ctx.user_data[\"row\"] = txt\r\n    await update.message.reply_text(\"Введите номер компьютера:\", reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_COMP\r\n\r\nasync def comp_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    txt = update.message.text.strip()\r\n    if txt == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    row = int(ctx.user_data[\"row\"])\r\n    max_comp = 9 if row in (5, 6) else 10\r\n    if not txt.isdigit() or not (1 <= int(txt) <= max_comp):\r\n        await update.message.reply_text(f\"Неверный комп. Введите 1–{max_comp}:\", reply_markup=CANCEL_KEYBOARD)\r\n        return STATE_COMP\r\n    ctx.user_data[\"row\"] = str(row)\r\n    ctx.user_data[\"comp\"] = txt\r\n    ctx.user_data[\"row_comp\"] = f\"{row}/{txt}\"\r\n    kb = [PROBLEMS[i:i+2] for i in range(0, len(PROBLEMS), 2)] + [[\"Отмена\"]]\r\n    await update.message.reply_text(\"Выберите тип проблемы:\",\r\n                                    reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True))\r\n    return STATE_PROBLEM_MENU\r\n\r\nasync def problem_menu_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    ch = update.message.text.strip()\r\n    if ch == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    if ch not in PROBLEMS:\r\n        await update.message.reply_text(\"Выберите проблему из списка:\", reply_markup=CANCEL_KEYBOARD)\r\n        return STATE_PROBLEM_MENU\r\n    ctx.user_data[\"problem\"] = ch\r\n    await update.message.reply_text(\"Опишите свою проблему кратко:\", reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_CUSTOM_DESC\r\n\r\nasync def custom_desc_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    txt = update.message.text.strip()\r\n    if txt == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    ctx.user_data[\"description\"] = txt\r\n    return await send_request(update, ctx)\r\n\r\nasync def send_request(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    rowc    = ctx.user_data[\"row_comp\"]\r\n    prob    = ctx.user_data[\"problem\"]\r\n    desc    = ctx.user_data[\"description\"]\r\n    user    = update.effective_user\r\n    req_id  = await db.add_ticket(rowc, prob, desc, user.full_name, user.id)\r\n\r\n    # Уведомление пользователя\r\n    await update.message.reply_text(\r\n        f\"✅ Запрос #{req_id} зарегистрирован.\\nР/К: {rowc}\\n{prob}. {desc}\",\r\n        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True),\r\n    )\r\n\r\n    # Уведомление ВСЕМ администраторам\r\n    btns_s  = [InlineKeyboardButton(s, callback_data=f\"status:{req_id}:{s}\")\r\n               for s in STATUS_OPTIONS if s != \"отменено\"]\r\n    btn_r   = InlineKeyboardButton(\"Ответить\", callback_data=f\"reply:{req_id}\")\r\n    created = format_kyiv_time((await db.get_ticket(req_id))[7])\r\n    admin_text = (f\"Новый запрос #{req_id}\\n\"\r\n                  f\"{rowc}: {prob}\\n\"\r\n                  f\"Описание: {desc}\\n\"\r\n                  f\"От: {user.full_name}, {created}\")\r\n    markup = InlineKeyboardMarkup([btns_s, [btn_r]])\r\n    for aid in ALL_ADMINS:\r\n        await ctx.bot.send_message(aid, admin_text, reply_markup=markup)\r\n\r\n    return ConversationHandler.END\r\n\r\n# — Мои запросы —\r\n\r\nasync def my_requests(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    uid  = update.effective_user.id\r\n    rowc = ctx.user_data.get(\"row_comp\", \"\")\r\n    all_r = await db.list_tickets()\r\n    mine  = [r for r in all_r if r[5] == uid and r[1] == rowc]\r\n    if not mine:\r\n        await update.message.reply_text(f\"У вас нет запросов для {rowc}.\",\r\n                                        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))\r\n        return\r\n    btns = [[InlineKeyboardButton(f\"#{r[0]} ({r[1]}) [{r[6]}] {r[2]}\",\r\n                                  callback_data=f\"show:{r[0]}\")]\r\n            for r in mine]\r\n    await update.message.reply_text(\"Ваши запросы — нажмите для подробностей:\",\r\n                                    reply_markup=InlineKeyboardMarkup(btns))\r\n\r\nasync def show_request(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    q   = update.callback_query; await q.answer()\r\n    rid = int(q.data.split(\":\")[1])\r\n    r   = await db.get_ticket(rid)\r\n    rowc = ctx.user_data.get(\"row_comp\", \"\")\r\n    if not r or r[5] != q.from_user.id or r[1] != rowc:\r\n        await q.edit_message_reply_markup(None)\r\n        await q.message.reply_text(\"Не ваш запрос.\",\r\n                                   reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))\r\n        return\r\n    await q.edit_message_reply_markup(None)\r\n    created = format_kyiv_time(r[7])\r\n    detail  = (f\"#{rid} — {r[1]}\\n\"\r\n               f\"Проблема: {r[2]}\\n\"\r\n               f\"Статус: {r[6]}\\n\"\r\n               f\"Создано: {created}\")\r\n    if r[6] not in (\"готово\", \"отменено\"):\r\n        kb = InlineKeyboardMarkup([[InlineKeyboardButton(\"Отменить запрос\",\r\n                                                         callback_data=f\"cancel_req:{rid}\")]])\r\n        await q.message.reply_text(detail, reply_markup=kb)\r\n    else:\r\n        await q.message.reply_text(detail)\r\n    await q.message.reply_text(\"Главное меню:\",\r\n                               reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))\r\n\r\nasync def cancel_request_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    q   = update.callback_query; await q.answer()\r\n    rid = int(q.data.split(\":\")[1])\r\n    r   = await db.get_ticket(rid)\r\n    if not r or r[5] != q.from_user.id:\r\n        await q.edit_message_text(\"Не удалось отменить.\")\r\n        return\r\n    await db.update_status(rid, \"отменено\")\r\n    await q.edit_message_text(f\"Запрос #{rid} отменён.\")\r\n    # уведомляем ВСЕХ админов\r\n    for aid in ALL_ADMINS:\r\n        await ctx.bot.send_message(aid,\r\n            f\"\uD83D\uDD14 Запрос #{rid} отменён пользователем {q.from_user.full_name}\")\r\n    # возврат пользователю\r\n    await ctx.bot.send_message(q.from_user.id,\r\n        \"Главное меню:\", reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))\r\n\r\n# — Ответ админа —\r\n\r\nasync def init_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    q   = update.callback_query; await q.answer()\r\n    rid = int(q.data.split(\":\")[1])\r\n    ctx.user_data[\"reply_ticket\"] = rid\r\n    await q.message.reply_text(f\"Введите ответ для запроса #{rid}:\",\r\n                               reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_REPLY\r\n\r\nasync def handle_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    txt = update.message.text.strip()\r\n    if txt == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    rid = ctx.user_data.get(\"reply_ticket\")\r\n    tkt = await db.get_ticket(rid)\r\n    if tkt:\r\n        await ctx.bot.send_message(tkt[5], f\"\uD83D\uDCAC Ответ на запрос #{rid}:\\n{txt}\")\r\n        await update.message.reply_text(\"Ответ отправлен.\",\r\n                           reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))\r\n    else:\r\n        await update.message.reply_text(\"Запрос не найден.\",\r\n                           reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))\r\n    return ConversationHandler.END\r\n\r\n# — Рассылка —\r\n\r\nasync def init_broadcast(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    await update.message.reply_text(\"Введите текст рассылки:\",\r\n                                   reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_BROADCAST\r\n\r\nasync def handle_broadcast(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    txt = update.message.text.strip()\r\n    if txt == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    users = await db.list_users(); sent = 0\r\n    for uid in users:\r\n        try:\r\n            await ctx.bot.send_message(uid, f\"\uD83D\uDCE2 Админ рассылка:\\n\\n{txt}\")\r\n            sent += 1\r\n        except:\r\n            pass\r\n    await update.message.reply_text(\r\n        f\"Рассылка отправлена {sent} пользователям.\",\r\n        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))\r\n    return ConversationHandler.END\r\n\r\n# — Справка и CRM —\r\n\r\nasync def help_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    kb = [\r\n        [\"Правила телефонии\", \"Ссылки для работы\"],\r\n        [\"Спич\",            \"CRM\"],\r\n        [\"Назад\"]\r\n    ]\r\n    await update.message.reply_text(\"Выберите раздел справки:\",\r\n                                    reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))\r\n\r\nasync def rules_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    await update.message.reply_text(HELP_TEXT_RULES)\r\n    await help_menu(update, ctx)\r\n\r\nasync def links_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    await update.message.reply_text(HELP_TEXT_LINKS)\r\n    await help_menu(update, ctx)\r\n\r\nasync def speech_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    await update.message.reply_text(HELP_TEXT_SPEECH)\r\n    await help_menu(update, ctx)\r\n\r\nasync def crm_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    raw = await db.get_setting(\"crm_text\") or \"\"\r\n    lines = []\r\n    for ln in raw.splitlines():\r\n        ln = ln.strip()\r\n        if not ln:\r\n            continue\r\n        parts = ln.rsplit(\" \", 2)\r\n        if len(parts) == 3:\r\n            name, team, code = parts\r\n            lines.append(f\"{name} ({team}) {code}\")\r\n        else:\r\n            lines.append(ln)\r\n    await update.message.reply_text(\"\\n\".join(lines))\r\n    await help_menu(update, ctx)\r\n\r\nasync def back_to_main(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    return await start_menu(update, ctx)\r\n\r\n# — Изменить CRM —\r\n\r\nasync def edit_crm_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    if update.effective_user.id not in ADMIN_IDS:\r\n        return\r\n    await update.message.reply_text(\"Введите весь текст CRM:\",\r\n                                   reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_CRM_EDIT\r\n\r\nasync def edit_crm_save(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    txt = update.message.text\r\n    if txt == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    await db.set_setting(\"crm_text\", txt)\r\n    await update.message.reply_text(\"✅ CRM сохранена.\",\r\n                          reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))\r\n    return ConversationHandler.END\r\n\r\n# — Админские разделы — all_requests, archive, stats, thanks, clear_requests —\r\n\r\nasync def all_requests_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    if update.effective_chat.id not in ADMIN_IDS:\r\n        return\r\n    rows = await db.list_tickets()\r\n    active = [r for r in rows if r[6] not in (\"готово\", \"отменено\")]\r\n    if not active:\r\n        await ctx.bot.send_message(update.effective_chat.id, \"Нет активных запросов.\")\r\n        return\r\n    for r in active:\r\n        rid, rowc, prob, descr, uname, uid, st, cts = r\r\n        created = format_kyiv_time(cts)\r\n        btns_s = [InlineKeyboardButton(s, callback_data=f\"status:{rid}:{s}\")\r\n                  for s in STATUS_OPTIONS if s != \"отменено\"]\r\n        btn_r = InlineKeyboardButton(\"Ответить\", callback_data=f\"reply:{rid}\")\r\n        await ctx.bot.send_message(\r\n            update.effective_chat.id,\r\n            f\"#{rid} [{st}]\\n{rowc}: {prob}\\nОписание: {descr}\\nОт: {uname}, {created}\",\r\n            reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]])\r\n        )\r\n\r\nasync def init_archive(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    await update.message.reply_text(\"Введите дату (ГГГГ-ММ-ДД):\",\r\n                                   reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_ARCHIVE_DATE\r\n\r\nasync def archive_date_invalid(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    await update.message.reply_text(\"Неверный формат. Введите ГГГГ-ММ-ДД:\",\r\n                                   reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_ARCHIVE_DATE\r\n\r\nasync def archive_by_date_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    d    = update.message.text.strip()\r\n    all_r = await db.list_tickets()\r\n    arch = [r for r in all_r if r[7].startswith(d) and r[6] in (\"готово\", \"отменено\")]\r\n    if not arch:\r\n        await update.message.reply_text(f\"Нет запросов за {d}.\",\r\n                    reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))\r\n    else:\r\n        for r in arch:\r\n            rid, rowc, prob, descr, uname, uid, st, cts = r\r\n            c = format_kyiv_time(cts)\r\n            await update.message.reply_text(\r\n                f\"#{rid} [{st}]\\n{rowc}: {prob}\\nОписание: {descr}\\nОт: {uname}, {c}\")\r\n        await update.message.reply_text(\"Меню администратора:\",\r\n                    reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))\r\n    return ConversationHandler.END\r\n\r\nasync def stats_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    await update.message.reply_text(\r\n        \"Введите период статистики (YYYY-MM-DD — YYYY-MM-DD):\",\r\n        reply_markup=CANCEL_KEYBOARD\r\n    )\r\n    return STATE_STATS_DATE\r\n\r\nasync def stats_show(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    txt = update.message.text.strip()\r\n    if txt == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    parts = [p.strip() for p in txt.split(\"—\")]\r\n    if len(parts) != 2:\r\n        await update.message.reply_text(\r\n            \"Неверный формат, используйте YYYY-MM-DD — YYYY-MM-DD\",\r\n            reply_markup=CANCEL_KEYBOARD\r\n        )\r\n        return STATE_STATS_DATE\r\n    start_str, end_str = parts\r\n    by_status  = await db.count_by_status(start_str, end_str)\r\n    by_problem = await db.count_by_problem(start_str, end_str)\r\n    lines = [f\"\uD83D\uDCCA Стата с {start_str} по {end_str}:\", \"\\nПо статусам:\"]\r\n    for st, cnt in by_status.items():\r\n        lines.append(f\"  • {st}: {cnt}\")\r\n    lines.append(\"\\nПо типам проблем:\")\r\n    for pr, cnt in by_problem.items():\r\n        lines.append(f\"  • {pr}: {cnt}\")\r\n    await update.message.reply_text(\"\\n\".join(lines),\r\n        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True))\r\n    return ConversationHandler.END\r\n\r\nasync def status_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    q      = update.callback_query; await q.answer()\r\n    _, rid_s, new_st = q.data.split(\":\")\r\n    rid    = int(rid_s)\r\n    await db.update_status(rid, new_st)\r\n\r\n    # Обновляем своё сообщение\r\n    if new_st in (\"готово\", \"отменено\"):\r\n        await q.edit_message_reply_markup(None)\r\n        await q.edit_message_text(f\"#{rid} — статус: «{new_st}»\")\r\n    else:\r\n        btns_s = [InlineKeyboardButton(s, callback_data=f\"status:{rid}:{s}\")\r\n                  for s in STATUS_OPTIONS if s != \"отменено\"]\r\n        btn_r = InlineKeyboardButton(\"Ответить\", callback_data=f\"reply:{rid}\")\r\n        await q.edit_message_text(f\"# {rid} — статус: «{new_st}»\",\r\n                                  reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]]))\r\n\r\n    tkt = await db.get_ticket(rid)\r\n    if not tkt:\r\n        return\r\n\r\n    user_id = tkt[5]\r\n\r\n    # Уведомляем ВСЕХ админов\r\n    for aid in ALL_ADMINS:\r\n        await ctx.bot.send_message(\r\n            aid, f\"\uD83D\uDD14 Статус запроса #{rid} обновлён на «{new_st}»\"\r\n        )\r\n\r\n    # Уведомляем пользователя\r\n    await ctx.bot.send_message(\r\n        user_id, f\"\uD83D\uDD14 Статус вашего запроса #{rid} обновлён: «{new_st}»\"\r\n    )\r\n\r\n    # Если \"готово\" — предлагаем фидбэк\r\n    if new_st == \"готово\":\r\n        fb_btn = InlineKeyboardButton(\"Проблема не решена\", callback_data=f\"feedback:{rid}\")\r\n        th_btn = InlineKeyboardButton(\"спасибо любимый айтишник <3\", callback_data=f\"thanks:{rid}\")\r\n        await ctx.bot.send_message(\r\n            user_id,\r\n            \"Если проблема не решена или хотите поблагодарить, нажмите:\",\r\n            reply_markup=InlineKeyboardMarkup([[fb_btn, th_btn]])\r\n        )\r\n\r\nasync def init_feedback(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    q = update.callback_query; await q.answer()\r\n    rid = int(q.data.split(\":\")[1])\r\n    ctx.user_data[\"feedback_ticket\"] = rid\r\n    await q.message.reply_text(\"Опишите, пожалуйста, что осталось нерешённым:\",\r\n                               reply_markup=CANCEL_KEYBOARD)\r\n    return STATE_FEEDBACK_TEXT\r\n\r\nasync def handle_feedback_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    txt = update.message.text.strip()\r\n    if txt == \"Отмена\":\r\n        return await cancel(update, ctx)\r\n    rid = ctx.user_data.get(\"feedback_ticket\")\r\n    tkt = await db.get_ticket(rid)\r\n    if not tkt:\r\n        await update.message.reply_text(\"Ошибка: запрос не найден.\",\r\n                                        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))\r\n        return ConversationHandler.END\r\n\r\n    # Возврат в статус \"принято\"\r\n    await db.update_status(rid, \"принято\")\r\n\r\n    problem  = tkt[2]\r\n    feedback_msg = f\"\uD83D\uDCAC Фидбэк к запросу #{rid}:\\n{txt}\"\r\n    recipients   = ALL_ADMINS\r\n    for aid in recipients:\r\n        await ctx.bot.send_message(aid, feedback_msg)\r\n\r\n        # Шлём админам заново как новый\r\n        btns_s = [InlineKeyboardButton(s, callback_data=f\"status:{rid}:{s}\")\r\n                  for s in STATUS_OPTIONS if s != \"отменено\"]\r\n        btn_r = InlineKeyboardButton(\"Ответить\", callback_data=f\"reply:{rid}\")\r\n        created = format_kyiv_time(tkt[7])\r\n        new_text = (f\"\uD83D\uDD04 Запрос #{rid} возвращён в «принято» после фидбека\\n\"\r\n                    f\"{tkt[1]}: {tkt[2]}\\n\"\r\n                    f\"Описание: {tkt[3]}\\n\"\r\n                    f\"От: {tkt[4]}, {created}\")\r\n        await ctx.bot.send_message(aid, new_text,\r\n                                   reply_markup=InlineKeyboardMarkup([btns_s, [btn_r]]))\r\n\r\n    await update.message.reply_text(\r\n        \"Спасибо за обратную связь! Возвращаемся в главное меню.\",\r\n        reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True)\r\n    )\r\n    return ConversationHandler.END\r\n\r\nasync def handle_thanks(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    q   = update.callback_query; await q.answer()\r\n    rid = int(q.data.split(\":\")[1])\r\n    tkt = await db.get_ticket(rid)\r\n    if not tkt:\r\n        await q.edit_message_text(\"Ошибка: запрос не найден.\")\r\n        return\r\n\r\n    for aid in ALL_ADMINS:\r\n        key = f\"thanks_{aid}\"\r\n        old = await db.get_setting(key) or \"0\"\r\n        cnt = int(old) + 1\r\n        await db.set_setting(key, str(cnt))\r\n        await ctx.bot.send_message(aid,\r\n            f\"\uD83D\uDE4F Пользователь {q.from_user.full_name} поблагодарил за запрос #{rid}.\")\r\n\r\n    await q.edit_message_text(\"Спасибо за благодарность! ❤\")\r\n    await ctx.bot.send_message(q.from_user.id, \"Главное меню:\",\r\n                               reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))\r\n\r\nasync def show_thanks_count(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    if update.effective_user.id not in ADMIN_IDS:\r\n        return\r\n    cnts = []\r\n    for aid in ALL_ADMINS:\r\n        v = await db.get_setting(f\"thanks_{aid}\") or \"0\"\r\n        cnts.append(f\"Admin {aid}: {v}\")\r\n    await update.message.reply_text(\r\n        \"Благодарности:\\n\" + \"\\n\".join(cnts),\r\n        reply_markup=ReplyKeyboardMarkup(ADMIN_MAIN_MENU, resize_keyboard=True)\r\n    )\r\n\r\nasync def clear_requests_admin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\r\n    if update.effective_chat.id not in ADMIN_IDS:\r\n        return\r\n    await db.clear_requests()\r\n    await ctx.bot.send_message(update.effective_chat.id, \"\uD83D\uDD04 Все запросы удалены администратором.\")\r\n\r\nasync def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:\r\n    await update.message.reply_text(\"❌ Отменено.\",\r\n                                    reply_markup=ReplyKeyboardMarkup(USER_MAIN_MENU, resize_keyboard=True))\r\n    return ConversationHandler.END\r\n\r\n# ─── Запуск бота ───────────────────────────────────────────────────────────────\r\n\r\ndef main():\r\n    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()\r\n\r\n    # ConversationHandlers\r\n    conv_ticket = ConversationHandler(\r\n        entry_points=[MessageHandler(filters.Regex(\"^Создать запрос$\"), start_conversation)],\r\n        states={\r\n            STATE_ROW:          [MessageHandler(filters.Regex(\"^Отмена$\"), cancel),\r\n                                 MessageHandler(filters.TEXT & ~filters.COMMAND, row_handler)],\r\n            STATE_COMP:         [MessageHandler(filters.Regex(\"^Отмена$\"), cancel),\r\n                                 MessageHandler(filters.TEXT & ~filters.COMMAND, comp_handler)],\r\n            STATE_PROBLEM_MENU: [MessageHandler(filters.Regex(\"^Отмена$\"), cancel),\r\n                                 MessageHandler(filters.TEXT & ~filters.COMMAND, problem_menu_handler)],\r\n            STATE_CUSTOM_DESC:  [MessageHandler(filters.Regex(\"^Отмена$\"), cancel),\r\n                                 MessageHandler(filters.TEXT & ~filters.COMMAND, custom_desc_handler)],\r\n        },\r\n        fallbacks=[CommandHandler(\"cancel\", cancel),\r\n                   MessageHandler(filters.Regex(\"^Отмена$\"), cancel)],\r\n    )\r\n    conv_reply = ConversationHandler(\r\n        entry_points=[CallbackQueryHandler(init_reply, pattern=r\"^reply:\\d+$\")],\r\n        states={ STATE_REPLY: [ MessageHandler(filters.Regex(\"^Отмена$\"), cancel),\r\n                               MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply) ]},\r\n        fallbacks=[CommandHandler(\"cancel\", cancel),\r\n                   MessageHandler(filters.Regex(\"^Отмена$\"), cancel)],\r\n    )\r\n    conv_broadcast = ConversationHandler(\r\n        entry_points=[MessageHandler(filters.Regex(\"^Отправить всем сообщение$\"), init_broadcast)],\r\n        states={ STATE_BROADCAST: [ MessageHandler(filters.Regex(\"^Отмена$\"), cancel),\r\n                                   MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast) ]},\r\n        fallbacks=[CommandHandler(\"cancel\", cancel),\r\n                   MessageHandler(filters.Regex(\"^Отмена$\"), cancel)],\r\n    )\r\n    conv_archive = ConversationHandler(\r\n        entry_points=[MessageHandler(filters.Regex(\"^Архив запросов$\"), init_archive)],\r\n        states={\r\n            STATE_ARCHIVE_DATE:[\r\n                MessageHandler(filters.Regex(r\"^\\d{4}-\\d{2}-\\d{2}$\"), archive_by_date_handler),\r\n                MessageHandler(filters.TEXT & ~filters.COMMAND, archive_date_invalid),\r\n            ],\r\n        },\r\n        fallbacks=[CommandHandler(\"cancel\", cancel),\r\n                   MessageHandler(filters.Regex(\"^Отмена$\"), cancel)],\r\n    )\r\n    conv_stats = ConversationHandler(\r\n        entry_points=[MessageHandler(filters.Regex(\"^Статистика$\"), stats_start)],\r\n        states={ STATE_STATS_DATE: [ MessageHandler(filters.TEXT & ~filters.COMMAND, stats_show) ]},\r\n        fallbacks=[CommandHandler(\"cancel\", cancel),\r\n                   MessageHandler(filters.Regex(\"^Отмена$\"), cancel)],\r\n    )\r\n    conv_crm = ConversationHandler(\r\n        entry_points=[MessageHandler(filters.Regex(\"^Изменить CRM$\"), edit_crm_start)],\r\n        states={ STATE_CRM_EDIT: [ MessageHandler(filters.TEXT & ~filters.COMMAND, edit_crm_save) ]},\r\n        fallbacks=[CommandHandler(\"cancel\", cancel),\r\n                   MessageHandler(filters.Regex(\"^Отмена$\"), cancel)],\r\n    )\r\n    conv_feedback = ConversationHandler(\r\n        entry_points=[CallbackQueryHandler(init_feedback, pattern=r\"^feedback:\\d+$\")],\r\n        states={ STATE_FEEDBACK_TEXT: [\r\n                   MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback_text),\r\n                   MessageHandler(filters.Regex(\"^Отмена$\"), cancel)\r\n               ]},\r\n        fallbacks=[CommandHandler(\"cancel\", cancel),\r\n                   MessageHandler(filters.Regex(\"^Отмена$\"), cancel)],\r\n    )\r\n\r\n    # Регистрация хендлеров\r\n    app.add_handler(CommandHandler(\"start\", start_menu))\r\n\r\n    app.add_handler(conv_ticket)\r\n    app.add_handler(conv_reply)\r\n    app.add_handler(conv_broadcast)\r\n    app.add_handler(conv_archive)\r\n    app.add_handler(conv_stats)\r\n    app.add_handler(conv_crm)\r\n    app.add_handler(conv_feedback)\r\n\r\n    # Пользовательские команды\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Мои запросы$\"), my_requests))\r\n\r\n    # Справка и CRM\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Справка$\"), help_menu))\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Правила телефонии$\"), rules_handler))\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Ссылки для работы$\"), links_handler))\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Спич$\"), speech_handler))\r\n    app.add_handler(MessageHandler(filters.Regex(\"^CRM$\"), crm_handler))\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Назад$\"), back_to_main))\r\n\r\n    # Админские кнопки\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Все запросы$\"), all_requests_cmd))\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Очистить все запросы$\"), clear_requests_admin))\r\n    app.add_handler(MessageHandler(filters.Regex(\"^Благодарности$\"), show_thanks_count))\r\n\r\n    # CallbackQueryHandlers\r\n    app.add_handler(CallbackQueryHandler(show_request, pattern=r\"^show:\\d+$\"))\r\n    app.add_handler(CallbackQueryHandler(cancel_request_callback, pattern=r\"^cancel_req:\\d+$\"))\r\n    app.add_handler(CallbackQueryHandler(status_callback, pattern=r\"^status:\\d+:\"))\r\n    app.add_handler(CallbackQueryHandler(handle_thanks, pattern=r\"^thanks:\\d+$\"))\r\n\r\n    app.run_polling()\r\n\r\nif __name__ == \"__main__\":\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/helpdesk_bot/bot.py b/helpdesk_bot/bot.py
--- a/helpdesk_bot/bot.py	(revision 148fe70ee79ee4896eb3c6766269393bcc4abfaf)
+++ b/helpdesk_bot/bot.py	(date 1756814564817)
@@ -24,11 +24,14 @@
 logging.basicConfig(level=logging.INFO)
 
 TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN")
-ADMIN_CHAT_ID   = int(os.getenv("ADMIN_CHAT_ID", "0"))
-SECOND_ADMIN_ID = 7615248486
-ADMIN_IDS       = {ADMIN_CHAT_ID, SECOND_ADMIN_ID}
-ALL_ADMINS      = list(ADMIN_IDS)   # ВСЕ админы получают уведомления
-
+ADMIN_CHAT_ID  = int(os.getenv("ADMIN_CHAT_ID", "0"))
+ADMIN_IDS = {
+    ADMIN_CHAT_ID,
+    7615248486,     # второй админ 7923988594 7615248486 8237445057
+    7923988594,     # третий админ
+    8237445057,
+}
+ALL_ADMINS = list(ADMIN_IDS)
 if not TELEGRAM_TOKEN or ADMIN_CHAT_ID == 0:
     raise RuntimeError("TELEGRAM_TOKEN или ADMIN_CHAT_ID не установлены")
 
